#+TITLE: Emacs Configuration

* Early Configuration
** Increase Garbage Collection Threshold

   Let's increase =emacs=' garbage collector threshold and inhibit font
   cache compression:

   #+begin_src emacs-lisp
     (setq gc-cons-threshold (* 100 1024 1024)
           inhibit-compacting-font-caches t)
   #+end_src

** Track Initialization Time

   This little snippet from [[https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ][System Crafters]] helps us track
   =emacs= initialization time

   #+begin_src emacs-lisp
     (defun fb/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
                (format "%.2f seconds"
                        (float-time
                         (time-subtract after-init-time before-init-time)))
                gcs-done))

     (add-hook 'emacs-startup-hook #'fb/display-startup-time)
   #+end_src

** Package System

   The first thing we need to do is initialize =emacs='s package
   system. That's achieved with the following =elisp= code.

   #+begin_src emacs-lisp
     (require 'package)

     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

     (add-to-list 'package-archives
		  '("melpa" . "http://melpa.org/packages/"))
     (add-to-list 'package-archives
		  '("elpa" . "https://elpa.gnu.org/packages/"))

     (package-initialize)
   #+end_src

* The Basics

** User Name, Email, etc

   This is where I'll setup some basic defaults for =emacs=. Things
   like =user-full-name=, =user-mail-address= and similar will be
   here.

   #+begin_src emacs-lisp
     (setq user-full-name "Felipe Balbi"
           user-mail-address "felipe@balbi.sh"
           calendar-latitude 60.17
           calendar-longitude 24.94
           calendar-location-name "Helsinki, FI"
           inhibit-startup-screen t
           make-backup-files nil)
     (global-prettify-symbols-mode t)
   #+end_src

** Windows Specific Settings

   If I'm running on windows, let's make things a little saner.

   #+begin_src emacs-lisp
     (if (eq system-type 'windows-nt)
         (setq-default visible-bell t
                       buffer-file-coding-system 'utf-8-unix))
   #+end_src

** Host Specific Settings

   Depending on the machine I am, I might need some extra
   configuration. For example, at the office I need a proxy to get
   through to the outside world. To cope with that, I'll add an
   optional =site-local.el= file on such machines and conditionally
   load it.

   #+begin_src emacs-lisp
     (let ((filename (concat "~/.emacs.d/" (system-name) ".org.gpg")))
       (if (file-exists-p filename)
           (org-babel-load-file filename)))
   #+end_src

** Prevent Accidentally closing =emacs=

   I tend to hit =C-x C-c= by accident all the time. This little trick
   helps me a lot

   #+begin_src emacs-lisp
     (setq confirm-kill-emacs 'yes-or-no-p)
   #+end_src

** Numbers, numbers, numbers

   #+begin_src emacs-lisp
     (setq fill-column 80)
     (column-number-mode)

     (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+end_src

** Indentation

   Some indentation configuration using mode-specific hooks

   #+begin_src emacs-lisp
     (add-hook 'sh-mode-hook
               (lambda ()
                 (setq sh-basic-offset 2)))

     (add-hook 'ruby-mode-hook
               (lambda ()
                 (setq ruby-indent-level 2)))

     (add-hook 'js-mode-hook
               (lambda ()
                 (setq js-indent-level 2)
                 (setq indent-tabs-mode nil)))

     (add-hook 'sgml-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)))

     (add-hook 'c-mode-hook
               (lambda ()
                 (c-set-style "linux")
                 (setq c-basic-offset 8
                       c-block-comment-prefix "* ")
                 (c-set-offset 'arglist-intro '++)
                 (c-set-offset 'arglist-cont '++)
                 (c-set-offset 'arglist-cont-nonempty '++)
                 (setq indent-tabs-mode t)))

     (add-hook 'c++-mode-hook
               (lambda ()
                 (c-set-style "gnu")
                 (setq c-basic-offset 4)
                 (setq c-block-comment-prefix "* ")
                 (setq indent-tabs-mode nil)))

     (add-hook 'lisp-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)))

     (add-hook 'scheme-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)))

     (add-hook 'awk-mode-hook
               (lambda ()
                 (c-set-style "awk")))
   #+end_src

** Highlight Current Line

   And I like to highlight current line

   #+begin_src emacs-lisp
     (global-hl-line-mode)
   #+end_src

** Current Time

   I wanna see a simple clock in my modeline, so let's enable
   =display-time-mode=

   #+begin_src emacs-lisp
     (setq display-time-24hr-format t)
     (display-time-mode 1)
   #+end_src

** Default =grep= options

   Better grep:

   #+begin_src emacs-lisp
     (setq grep-command "grep --color -nH -e")
   #+end_src

** Always follow symlinks

   #+begin_src emacs-lisp
     (setq vc-follow-symlinks t)
   #+end_src

** Default Font Faces

   I like to use =Fira Code Font= for pretty much everything.

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
                         :font "Fira Code"
                         :height 140
                         :weight 'regular
                         :width 'normal)
   #+end_src

** Disable lockfiles

   #+begin_src emacs-lisp
     (setq create-lockfiles nil)
   #+end_src

** Setup a new home for =custom-file=

   Well, I don't want =custom= touching my beautiful =init.el=. Let's give
   it a dumping ground.

   #+begin_src emacs-lisp
     (unless (file-exists-p "~/.emacs.d/custom.el")
       (with-temp-buffer (write-file "~/.emacs.d/custom.el")))

     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file)
   #+end_src

** Bars, Menus, Tooltips

   We really don't need bars for everything when you're using keyboard
   only.

   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (horizontal-scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
   #+end_src

** Setup =native-comp=

    #+begin_src emacs-lisp
      (setq native-comp-deferred-compilation t)
      (setq native-comp-async-report-warnings-errors nil)
    #+end_src

* Install =use-package= if necessary

  =use-package= let's me quickly and easily rebuild my configuration
  by simply cloning this repository and opening =emacs=. The first
  time, it will install all required packages.

  #+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (eval-when-compile
      (require 'use-package))
  #+end_src

  While at that, also make sure that =use-package= will /ensure/ and
  /defer/ by default

  #+begin_src emacs-lisp
    (setq use-package-always-ensure t
          use-package-always-defer  t)
  #+end_src

* Setup =PATH= variable

  Always set =PATH= and =MANPATH= from shell, even when initialized
  from GUI helpers like =dmenu= or =Spotlight=

  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :unless (string-equal system-type "windows-nt")
      :demand t
      :init
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
  #+end_src

* Setup =auto-fill-mode=

  I like to have =auto-fill-mode= enabled on all my text
  buffers. Easiest way of achieve that is to add =turn-on-auto-fill=
  to =text-mode-hook=

  #+begin_src emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+end_src

* Setup =modus-themes=

The =modus-themes= is new to emacs 28.1.
  
  #+begin_src emacs-lisp
    (use-package modus-themes
      :defer nil
      :custom
      (modus-themes-bold-constructs t)
      (modus-themes-fringes 'subtle)
      (modus-themes-hl-line '(accented intense))
      (modus-themes-italic-constructs t)
      (modus-themes-mixed-fonts t)
      (modus-themes-mode-line '(borderless))
      (modus-themes-org-blocks 'tinted-background)
      (modus-themes-paren-match '(intense bold))
      (modus-themes-prompts '(bold intense))
      (modus-themes-region '(bg-only accented))
      (modus-themes-scale-headings t)
      (modus-themes-syntax '(alt-syntax))
      (modus-themes-subtle-line-numbers t)
      (modus-themes-tabs-accented t)

      (modus-themes-completions
       '((matches . (extrabold background intense))
         (selection . (semibold accented intense))
         (popup . (accented))))

      (modus-themes-headings
       '((1 . (rainbow overline background 1.4))
         (2 . (rainbow background 1.3))
         (3 . (rainbow bold 1.2))
         (t . (semilight 1.1))))

       :config
       (load-theme 'modus-operandi t)

       :bind ("<f5>" . modus-themes-toggle))
  #+end_src

* Setup =geiser=

  =guile= is a language that lately I've been trying to get acquainted to
  and, as such, I need a cool way of communicating with a =REPL= from
  inside =emacs=. =gueiser= seems to be a good choice for that

  #+begin_src emacs-lisp
    (use-package geiser
      :custom
      (geiser-active-implementations '(mit guile racket)))

    (use-package geiser-guile
      :after geiser)

    (use-package geiser-mit
      :after geiser)

    (use-package geiser-racket
      :after geiser)
  #+end_src

* Setup =paredit=

  This is probably the most awkward mode to get used to. Still, it's so
  darn helpful that I just have to use it.

  #+begin_src emacs-lisp
    (use-package paredit
      :hook ((emacs-lisp-mode
              ielm-mode
              lisp-mode
              lisp-interaction-mode
              scheme-mode) . enable-paredit-mode)
      :init
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode))
  #+end_src

* Setup =show-parens=

  This makes it a lot easier to see matching parens

  #+begin_src emacs-lisp
    (show-paren-mode 1)
  #+end_src

* Setup =rainbow-delimiters=

  As a complement to =paredit= I want my parens to be easy to see, hence =rainbow-delimiters=

  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook
      ((emacs-lisp-mode
	ielm-mode
	lisp-mode
	lisp-interaction-mode
	scheme-mode) . rainbow-delimiters-mode))
  #+end_src

* Setup =prettify-symbols-mode=

  I like to have nice looking =lambda= characters on all my lisp-y
  modes. Let's push the =lambda= character to other mode hooks too.

  We also have a rather cute symbol for =function= on =js-mode=.

  #+begin_src emacs-lisp
    (defun push-pretty-characters ()
      "Push pretty characters to mode-specific prettify-symbols-alist"
      (push '("lambda" . #x03bb) prettify-symbols-alist))

    (add-hook 'emacs-lisp-mode-hook       #'push-pretty-characters)
    (add-hook 'eval-expression-minibuffer-setup-hook #'push-pretty-characters)
    (add-hook 'ielm-mode-hook             #'push-pretty-characters)
    (add-hook 'lisp-mode-hook             #'push-pretty-characters)
    (add-hook 'lisp-interaction-mode-hook #'push-pretty-characters)
    (add-hook 'scheme-mode-hook           #'push-pretty-characters)

    (add-hook 'js-mode-hook (lambda ()
                              (push '("function" . ?ƒ) prettify-symbols-alist)))
  #+end_src

* Setup =vertico=, =consult=, =orderless=, =corfu=, and =marginalia=

  Okay, I'm a bit tired of =helm=. Let's switch over to =vertico= and
  figure out what I've been missing.

  #+begin_src emacs-lisp
    (use-package vertico
      :demand t
      :custom
      (vertico-cycle t)
      :init
      (vertico-mode t))

    (use-package orderless
      :demand t
      :after vertico
      :custom
      (completion-styles '(orderless))
      (completion-category-overrides '((file (styles partial-completion))))
      :init
      (setq completion-category-defaults nil))

    (use-package consult
      :demand t
      :after vertico
      :config
      ;; Use `consult-completion-in-region' if Vertico is enabled.
      ;; Otherwise use the default `completion--in-region' function.
      (setq completion-in-region-function
            (lambda (&rest args)
              (apply (if vertico-mode
                         #'consult-completion-in-region
                       #'completion--in-region)
                     args)))
      :bind (("C-s" . consult-line)
             ("C-r" . consult-line)
             ("C-c g" . consult-git-grep)
             ("C-c o" . consult-imenu)
             ("C-x b" . consult-buffer)
             ("C-x C-d" . project-find-file)
             ("M-y" . consult-yank-pop)
             ("M-g M-g" . consult-goto-line)
             ("C-h a" . consult-apropos)
             :map minibuffer-local-map
             ("C-r" . consult-history)))

    (use-package marginalia
      :demand t
      :after vertico
      :init
      (marginalia-mode t))

    (use-package corfu
      :after vertico
      :custom
      (corfu-cycle t)
      :init
      (global-corfu-mode))

    (use-package emacs
      :init
      (setq completion-cycle-threshold 5)

      (setq read-extended-command-predicate
            #'command-completion-default-include-p)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete))
  #+end_src

* Setup =doom-modeline=

  #+begin_src emacs-lisp
    (use-package doom-modeline
      :demand t
      :hook (after-init . doom-modeline-mode)
      :custom
      (find-file-visit-truename t)
      (doom-modeline-hud t)
      (doom-modeline-icon t)
      (doom-modeline-mu4e t)
      (doom-modeline-major-mode-icon t)
      (doom-modeline-major-mode-color-icon t)
      (doom-mu4e-alert t)
      (doom-modeline-unicode-fallback t))
  #+end_src

* Setup =org-mode=
** Setup =org= and =org-bullets=

   =org= is =emacs='s organizer package. I use it a lot and really enjoy
   it. Let's set it up.

   First we will be using our local copy of org git tree:

   #+begin_src emacs-lisp
     (use-package org
       :hook (org-mode . (lambda () (org-indent-mode t)))

       :bind
       (("C-c l" . org-store-link)
        ("C-c a" . org-agenda)
        ("C-c c" . org-capture)
        ("C-c b" . org-switchb))

       :custom
       (org-directory "~/workspace/org")
       (org-agenda-files '("~/workspace/org/"))
       (org-agenda-skip-deadline-if-done t)
       (org-agenda-skip-scheduled-if-done t)
       (org-return-follows-link t)
       (org-ellipsis "⤵")
       (org-startup-folded t)
       (org-src-fontify-natively t)
       (org-src-tab-acts-natively t)
       (org-enforce-todo-dependencies t)
       (org-enforce-todo-checkbox-dependencies t)
       (org-agenda-dim-blocked-tasks t)
       (org-highlight-latex-and-related '(native latex script))
       (org-confirm-babel-evaluate
        (lambda (lang body)
          (not (memq (intern lang) '(c shell python dot ditaa)))))

       :config
       (require 'org-tempo nil t)
       (require 'ox-odt nil t)
       (require 'ox-md nil t)
       (setq org-latex-pdf-process
             '("latexmk -xelatex -bibtex -shell-escape -f -pdf %f"))
       (setq org-latex-listings 'minted)
       (setq org-latex-minted-options
             '(("linenos=true")))
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("cc" . "src c"))
       (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
       (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
       (add-to-list 'org-structure-template-alist '("js" . "src js"))
       (add-to-list 'org-modules 'org-habit)

       (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)
                                                                (C . t)
                                                                (python . t)
                                                                (shell . t)
                                                                (sql . t)
                                                                (dot . t)))
       (add-to-list 'org-latex-classes
                    '("scrreprt" "\\documentclass[11pt]{scrreprt}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
       (add-to-list 'org-latex-classes
                    '("scrbook" "\\documentclass[11pt]{scrbook}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
       (add-to-list 'org-latex-classes
                    '("notes" "\\documentclass[11pt]{scrbook}"
                      ("\\addchap{%s}" . "\\addchap{%s}")
                      ("\\addsec{%s}" . "\\addsec{%s}")
                      ("\\subsection*{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection*{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph*{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph*{%s}" . "\\subparagraph*{%s}")))
       (add-to-list 'org-latex-classes
                    '("scrartcl" "\\documentclass[11pt]{scrartcl}"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-hide-leading-stars t))
   #+end_src

   Configuring some useful TODO keywords

   #+begin_src emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t@)" "IN PROGRESS(p@)" "|"
                       "DONE(d@)" "CANCELED(c@)"
                       "BLOCKED(b@)" "AWAITING(a@)")))
   #+end_src

   Track completion of a task

   #+begin_src emacs-lisp
     (setq org-log-done 'time)
   #+end_src

   Track notes into a drawer

   #+begin_src emacs-lisp
     (setq org-log-into-drawer t)
   #+end_src

   Define priorities

   #+begin_src emacs-lisp
     (setq org-highest-priority ?A
           org-lowest-priority ?E
           org-default-priotiy ?E)
   #+end_src

** Setup =ox-ioslide=

   =ox-ioslide= helps us exporting =org= documents to Google I/O HTML5
   slides. This can come in very handy ;-)

   #+begin_src emacs-lisp
     (use-package ox-ioslide)
   #+end_src

** Setup =ox-rst=

   =ox-rst= will be used to export =org= documents to =ReST= format which
   is used as Linux' documentation source.

   #+begin_src emacs-lisp
     (use-package ox-rst)
   #+end_src

** Setup =org-roam=

   #+begin_src emacs-lisp
     (use-package org-roam
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory "~/workspace/org/")
       (org-roam-completion-everywhere t)
       (org-roam-completion-system 'default)
       (org-roam-dailies-directory "daily/")

       (org-roam-capture-templates
	'(("d" "default" plain "\n\n- tags :: \n\n%?"
	  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			     "#+title: ${title}\n")
	  :unnarrowed t)

	  ("b" "Book " plain
	   "\n- Author: %^{Author}\n- Year: %^{Year}\n- tags :: [[id:94725604-4291-4114-93db-0d998d4c2e8a][Book]] [[id:ddc78b59-68ec-458e-a6bf-f1bbfdfac6d9][Reading]]\n\n%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)

	  ("p" "Person " plain
	   "\n\n- tags :: [[id:0388192d-6858-4dad-b4fc-954130971423][People]]\n- Email: %^{Email}\n\n%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)

	  ("m" "Meeting " plain
	   "\n\n- Date :: %<%Y-%m-%d>\n- Attendees :: %?\n- tags :: [[id:842F6D81-10D6-4CE3-9646-81024DD3A0BC][Meeting]]\n* Agenda\n\n-"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)))

       :bind (("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n e" . org-roam-extract-subtree)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n g" . org-roam-graph)
	      ("C-c n i" . org-roam-node-insert)
	      ("C-c n c" . org-roam-capture)
	      ("C-c n r" . org-roam-ref-add)
	      ("C-c n R" . org-roam-ref-remove)
	      ("C-c n t" . org-roam-tag-add)
	      ("C-c n T" . org-roam-tag-remove)
	      ("C-c n a" . org-roam-alias-add)
	      ("C-c n A" . org-roam-alias-remove)
	      ;; Dailies
	      ("C-c n d" . org-roam-dailies-goto-date)
	      ("C-c n j" . org-roam-dailies-goto-today)
	      ("C-c n y" . org-roam-dailies-goto-yesterday))
       :config
       (add-to-list 'display-buffer-alist
		    '("\\*org-roam\\*"
		      (display-buffer-in-direction)
		      (direction . right)
		      (window-width . 0.5)
		      (window-height . fit-window-to-buffer)))
       (org-roam-db-autosync-enable))

     (use-package org-roam-ui
       :after org-roam
       :config
       (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start t)

       ;; normally we'd recommend hooking orui after org-roam, but since
       ;; org-roam does not have a hookable mode anymore, you're advised to
       ;; pick something yourself if you don't care about startup time, use:
       ;;
       ;; :hook (after-init . org-roam-ui-mode)
       )
   #+end_src

* Setup =magit=

  This is simple to configure.

  #+begin_src emacs-lisp
    (use-package magit
      :config (setq magit-diff-use-overlays nil
                    magit-commit-arguments '("--signoff"))
      :bind ("C-x g" . magit-status))
  #+end_src

* Setup =eshell=

  Really not much here, I just need a key chord to start =eshell= at will

  #+begin_src emacs-lisp
    (use-package eshell
      :bind ("C-c t" . eshell))
  #+end_src

* Setup =engine-mode=

  =engine-mode= helps me starting out searches from within =emacs=. It's
  a bit useful and I kinda like it.

  #+begin_src emacs-lisp
    (use-package engine-mode
      :config
      (engine/set-keymap-prefix (kbd "C-c s"))

      (defengine duckduckgo
        "https://duckduckgo.com/?q=%s"
        :keybinding "d")

      (defengine google
        "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
        :keybinding "g")

      (defengine wikipedia
        "https://en.wikipedia.org/w/index.php?title=Special:Search&go=Go&search=%s"
        :keybinding "w")

      (defengine wolfram-alpha
        "https://www.wolfram-alpha.com/input/?i=%s")

      (defengine youtube
        "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
        :keybinding "y")

      (defengine 17track
        "http://www.17track.net/en/track?nums=%s"
        :keybinding "t")

      (engine-mode t))
  #+end_src

* Setup =mu4e=

  After installing =isync= and =mu= packages, we can use =mu4e=

  #+begin_src emacs-lisp
    (use-package mu4e
      ;; :ensure nil
      :load-path "/usr/share/emacs/site-lisp/mu4e/"

      ;;; Wait 5 seconds after startup
      :defer 5
      :custom
      (mu4e-use-fancy-chars t)
      :config
      (setq mu4e-change-filenames-when-moving t)

      (setq mu4e-update-interval (* 5 60))
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-maildir "~/maildir")

      (setq mu4e-drafts-folder "/[Gmail]/Drafts")
      (setq mu4e-sent-folder "/[Gmail]/Sent Mail")
      (setq mu4e-refile-folder "/[Gmail]/All Mail")
      (setq mu4e-trash-folder "/[Gmail]/Trash")

      (setq mu4e-maildir-shortcuts
            '(("/Inbox"             . ?i)
              ("/[Gmail]/Sent Mail" . ?s)
              ("/[Gmail]/Trash"     . ?t)
              ("/[Gmail]/Drafts"    . ?d)
              ("/[Gmail]/All Mail"  . ?A)
              ("/linux-usb"         . ?u)
              ("/linux-arm-msm"     . ?a)))

      ;;; SMTP
      (setq mail-user-agent 'mu4e-user-agent) 
      (setq message-send-mail-function 'smtpmail-send-it) 
      (setq smtpmail-smtp-server "mail.kernel.org")
      (setq smtpmail-smtp-service 587)
      (setq smtpmail-smtp-user "balbi")

      ;;; Show images and addresses
      (setq mu4e-view-show-images t)
      (setq mu4e-view-show-addresses t)

      ;;; Don't reply to myself
      (setq mu4e-compose-dont-reply-to-self t)

      ;;; Don't keep message buffers
      (setq message-kill-buffer-on-exit t)

      ;;; Sign messages with mml-sercure-sign-pgpmime
      (setq mml-secure-openpgp-signers '("F43BA643AD16119D3D2C812BCE57CD33DC03CD48"))

      ;;; Always sign messages
      (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)

      ;;; Bookmarks
      (setq mu4e-bookmarks
            '((:name "Linux ARM MSM" :query "(to:linux-arm-msm@vger.kernel.org OR cc:linux-arm-msm@vger.kernel.org) AND flag:unread AND NOT flag:trashed" :key ?m)
              (:name "Linux-USB" :query "(to:linux-usb@vger.kernel.org OR cc:linux-usb@vger.kernel.org) AND flag:unread AND NOT flag:trashed" :key ?u)
              (:name "Linux-Input" :query "(to:linux-input@vger.kernel.org OR cc:linux-input@vger.kernel.org) AND flag:unread AND NOT flag:trashed" :key ?i)
              (:name "EDK II Devel" :query "(to:devel@edk2.groups.io OR cc:devel@edk2.groups.io) AND flag:unread AND NOT flag:trashed" :key ?e)
              (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?U)
              (:name "Today's messages" :query "date:today..now" :key ?t)
              (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)))

      ;;; Start `mu4e' in the background after emacs starts. This will
      ;;; guarantee start of periodic synchronization of emails
      (mu4e t))

    (use-package mu4e-alert
      :after mu4e)
  #+end_src

* Setup =ledger-mode=

  I use =ledger-mode= for managing my finances.

  #+begin_src emacs-lisp
    (use-package ledger-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.ledger\\'" . ledger-mode))
      (setq ledger-clear-whole-transactions t
            ledger-reconcile-default-commodity "€"
            ledger-reconcile-force-window-bottom t
            ledger-master-file "~/workspace/accounting/general.ledger"
            ledger-reports '(("bal" "%(binary) -f %(ledger-file) bal -B")
                             ("reg" "%(binary) -f %(ledger-file) reg")
                             ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
                             ("account" "%(binary) -f %(ledger-file) reg %(account)"))))
  #+end_src

* Setup =restclient=

  Well, maybe I could play a bit with =restclient= every now and again
  :-)

  #+begin_src emacs-lisp
    (use-package restclient)
  #+end_src

* Setup =octave-mode=

  Use =*.m= as default extension for octave files

  #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
  #+end_src

* Setup =markdown-mode=

  #+begin_src emacs-lisp
    (use-package markdown-mode
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "pandoc"))
  #+end_src

* Setup =yasnippet=

  #+begin_src emacs-lisp
    (use-package yasnippet
      :demand t
      :config
      (setq yas-verbosity 1
            yas-wrap-around-region t)

      (with-eval-after-load 'yasnippet
        (setq yas-snippet-dirs (list "~/.emacs.d/personal-snippets")))

      (yas-reload-all)
      (yas-global-mode))
  #+end_src

* Setup =sly=

  I've started reading Land Of Lisp and will, therefore, play around
  with Common Lisp. For that, I'll be using =sly= with =sbcl=

  #+begin_src emacs-lisp
    (use-package sly
      :custom
      (inferior-lisp-program "sbcl"))
  #+end_src

* Setup =haskell-mode=

  Learning me some haskell.

  #+begin_src emacs-lisp
    (use-package haskell-mode
      :init
      (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
      (add-hook 'haskell-mode-hook #'haskell-indentation-mode))
  #+end_src

* Setup =multiple-cursors=

  #+begin_src emacs-lisp
    (use-package multiple-cursors
      :demand t
      :bind (("C->" . mc/mark-next-like-this)
             ("C-<" . mc/mark-previous-like-this)
             ("C-c C-<" . mc/mark-all-like-this)
             ("C-S-c C-S-c" . mc/edit-lines)))
  #+end_src

* Setup =dts-mode=

  #+begin_src emacs-lisp
    (use-package dts-mode
      :pin elpa)
  #+end_src

  #+RESULTS:

* Setup =cmake-mode=

  I have a few projects using =cmake= as the build system,
  =cmake-mode= at least gives me a sensible mode for editting those
  files.

  #+begin_src emacs-lisp
    (use-package cmake-mode)
  #+end_src

* Setup =erc=

  #+begin_src emacs-lisp
    (use-package erc-hl-nicks
      :after erc)

    (use-package erc-image
      :after erc)

    (use-package erc-hl-nicks
      :after erc)

    (use-package erc
      :commands erc
      :custom
      (erc-nick '("balbi" "balbi_" "felipebalbi"))
      (erc-user-full-name "Felipe Balbi")
      (erc-interpret-mirc-color t)
      (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
      (erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE"))
      (erc-track-enable-keybindings nil)
      (erc-track-visibility nil) ; Only use the selected frame for visibility
      (erc-fill-column 80)
      (erc-fill-function 'erc-fill-static)
      (erc-fill-static-center 20)
      (erc-default-server "irc.libera.chat")
      (erc-autojoin-channels-alist '(("libera.chat" "#emacs" "#guix" "#systemcrafters")))
      (erc-quit-reason (lambda (s) (or s "Later...")))
      (erc-modules
       '(autoaway autojoin button completion image fill irccontrols keep-place
                  list match menu move-to-prompt netsplit networks noncommands
                  readonly ring stamp track hl-nicks)))
  #+end_src

* Setup =scad-mode=

  Should we play with some =openscad=?

  #+begin_src emacs-lisp
    (use-package scad-mode)
  #+end_src

* Setup =proof-general=

  Proof general is used to communicate with proof assistants. As I
  want to work through the [[https://softwarefoundations.cis.upenn.edu/][Software Foundations Books]], I'll rely on
  =proof-general= to communicate with Coq.

  #+begin_src emacs-lisp
    (use-package proof-general
      :ensure t)
  #+end_src

* Setup =rust-mode=

  Let's play with =rust=

  #+begin_src emacs-lisp
    (use-package rust-mode
      :config
      (setq indent-tabs-mode nil)
      :custom
      (rust-format-on-save t))

    (use-package cargo
      :after rust-mode
      :hook (rust-mode . cargo-minor-mode)
      :bind
      ("C-c C-c n" . cargo-process-new))

    (use-package rustic
      :after rust-mode
      :config
      (setq rustic-format-on-save t)
      (setq rustic-lsp-client 'eglot)
      (setq rustic-lsp-server 'rust-analyzer))
  #+end_src

* Setup =eglot=

#+begin_src emacs-lisp
  (use-package eglot
    :hook ((c-mode cc-mode rust-mode python-mode latex-mode bibtex-mode) . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(rust-mode . ("rust-analyzer"))))
#+end_src

* Setup =elec-pair=

  #+begin_src emacs-lisp
    (use-package elec-pair
      :hook ((c-mode cc-mode rust-mode) . electric-pair-local-mode))
  #+end_src

* All The Icons

  #+begin_src emacs-lisp
    (use-package all-the-icons)

    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode))
  #+end_src

* Outro
** Some extra keybindings for myself

   These are super helpful for day to day use

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-1") 'text-scale-increase)
     (define-key global-map (kbd "C-0") 'text-scale-decrease)
   #+end_src

** Enable some disabled commands

   Few commands I want to use but are disabled by default
  
   #+begin_src emacs-lisp
     (put 'narrow-to-region 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'dired-find-alternate-file 'disabled nil)
   #+end_src
** GnuPG 2

   We're gonna tell =emacs= to use =gpg2=

   #+begin_src emacs-lisp
     (setq epg-gpg-program "/usr/bin/gpg2")
   #+end_src
** Reduce Garbage Collection Threshold

   #+begin_src emacs-lisp
     (setq gc-cons-threshold (* 2 1024 1024))
   #+end_src

